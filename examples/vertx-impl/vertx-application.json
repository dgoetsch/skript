{
  "modules":[
    "playwrigkt.skript.application.VertxModule",
    "playwrigkt.skript.application.ExampleApplicationModule",
    "playwrigkt.skript.application.ProduktionManagerModule"
  ],
  "applicationResourceLoaders": [
    {
      "name": "vertx",
      "dependencyOverrides": {},
      "config":{}
    },
    {
      "name": "vertxSqlStageManager",
      "dependencyOverrides": {},
      "config": {
        "sql": {
          "provider_class": "io.vertx.ext.jdbc.spi.impl.HikariCPDataSourceProvider",
          "jdbcUrl": "jdbc:postgresql://localhost:5432/chitchat",
          "username": "chatty_tammy",
          "password": "gossipy",
          "driver_class": "org.postgresql.Driver",
          "maximumPoolSize": 1,
          "poolName": "test_pool"
        }
      }
    },
    {
      "name": "vertxSerializeStageManager",
      "dependencyOverrides": {}
    },
    {
      "name": "vertxPublishStageManager",
      "dependencyOverrides": {}
    },
    {
      "name": "vertxHttpClientStageManager",
      "dependencyOverrides": {},
      "config": {}
    },
    {
      "name": "vertxHttpServerVenue",
      "dependencyOverrides": {},
      "config": {
        "httpServer":{
          "port":8080
        }
      }
    },
    {
      "name": "vertxVenue",
      "dependencyOverrides": {}
    },
    {
      "name": "exampleApplicationStageManager",
      "dependencyOverrides": {
        "http-client": "vertxHttpClientStageManager",
        "serialize": "vertxSerializeStageManager",
        "publish": "vertxPublishStageManager",
        "sql": "vertxSqlStageManager"
      }
    },
    {
      "name": "exampleApplication",
      "dependencyOverrides": {
        "http-server-venue": "vertxHttpServerVenue",
        "queue-venue": "vertxVenue"
      }
    },
    {
      "name":"produktionManager",
      "dependencyOverrides":{
          "venue":"vertxHttpServerVenue",
          "stageManager":"exampleApplicationStageManager"
      },
      "config":{
        "produktions":[
          {
            "className":"playwrigkt.skript.user.http.UserHttpSkripts",
            "mappings": {
              "getUser": {
                "path": "/users/{userId}",
                "headers": {
                  "Authorization": []
                },
                "method": "GET"
              },
              "createUser": {
                "path": "/users",
                "headers": {},
                "method": "Post"
              },
              "loginUser": {
                "path": "/login",
                "headers": {},
                "method": "Post"
              }
            }
          }
        ]
      }
    }
  ]
}
